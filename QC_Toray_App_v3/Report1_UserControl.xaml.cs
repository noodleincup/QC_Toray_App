using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using OfficeOpenXml;  // For Excel Export
using System.Windows.Controls.Primitives;
using System.Drawing.Printing;
using System.Reflection.Metadata;
using iTextSharp.text;

//using iTextSharp.text;
using iTextSharp.text.pdf;
using Document = iTextSharp.text.Document;
using Paragraph = iTextSharp.text.Paragraph;
using HandleDatabase;
using System.Windows.Media.Media3D;
using Org.BouncyCastle.Pqc.Crypto.Lms;


namespace QC_Toray_App_v3
{
    /// <summary>
    /// Interaction logic for Report1_UserControl.xaml
    /// </summary>
    public partial class Report1_UserControl : UserControl
    {
        // Create DataTable
        DataTable dt = new DataTable();

        public Report1_UserControl()
        {
            InitializeComponent();
            dataGrid.AutoGeneratedColumns += DataGrid_AutoGeneratedColumns; // Attach event
            LoadData();
        }

        #region Prepare Data from Database
        private List<string> PrepareHeader()
        {
            // Get Connection String for connecting database
            string conn = DatabaseConfig.ConnectionString;

            // Define Users Database Object
            ItemsHandle itemsDb = new ItemsHandle(conn);

            // Get Item Data
            DataTable items = itemsDb.GetItems();

            // Define Header
            List<string> headers = new List<string>();
            
            // Add headers
            headers.Add("Batch Number");
            for (int i = 0; i < items.Rows.Count; i++)
            {
                string column = items.Rows[i]["Batch_Num"].ToString();
                headers.Add(column);
            }

            return headers;
        }
        private List<string[]> PrepareData()
        {
            // Get Connection String for connecting database
            string conn = DatabaseConfig.ConnectionString;

            // Define Users Database Object
            ItemsHandle itemsDb = new ItemsHandle(conn);

            // Get Item Data
            DataTable items = itemsDb.GetItems();

            // Define Rows
            List<string[]> rows = new List<string[]>();

            // Add Lot row
            List<string> lotRow = PrepareRow("Lot No.", items, "Lot");
            rows.Add(lotRow.ToArray());

            // Add Pallet Size Title row
            string[] titlePallSizeRow= ["1. Pallet size"];
            rows.Add(titlePallSizeRow.ToArray());

            // Add Pallet Size row
            List<string> palletSizeRow = PrepareRow("  1.1 Pellet size", items, "Pallet_Size");
            rows.Add(palletSizeRow.ToArray());

            // Add Misscut Title row
            string[] titleMisscut = ["  1.2 Misscut of pellets"];
            rows.Add(titleMisscut.ToArray());

            // Add Misscut Double row
            List<string>  misscutDbRow = PrepareRow("                (1) Double length", items, "MissDb");
            rows.Add(misscutDbRow.ToArray());

            // Add Misscut Triple row
            List<string> misscutTpRow = PrepareRow("                (2) Triple length", items, "MissTp");
            rows.Add(misscutTpRow.ToArray());

            // Add Misscut Fourth row
            List<string> misscutFfRow = PrepareRow("                (3) Fourfold length", items, "MissTp");
            rows.Add(misscutFfRow.ToArray());

            // Add Linkage Title row
            string[] titleLinkage = ["  1.3 Linkage of pellets "];
            rows.Add(titleLinkage.ToArray());

            // Add Linkage Double row
            List<string> linkageDbRow = PrepareRow("                (1) Double length", items, "LinkDb");
            rows.Add(linkageDbRow.ToArray());

            // Add Linkage Triple row
            List<string> linkageTpRow = PrepareRow("                (2) Triple length", items, "LinkTp");
            rows.Add(linkageTpRow.ToArray());

            // Add Linkage Fourth row
            List<string> linkageFfRow = PrepareRow("                (3) Fourfold length", items, "LinkFf");
            rows.Add(linkageFfRow.ToArray());

            // Add Linkage Fifth row
            List<string> linkageFFRow = PrepareRow("                (4) Fivefold length", items, "LinkFif");
            rows.Add(linkageFFRow.ToArray());

            // Add Defect row
            List<string> defectRow = PrepareRow("  1.4 Defect of cutting plane", items, "Defect");
            rows.Add(defectRow.ToArray());

            // Add GF Title row
            string[] titleGF = ["2. GF not Distribution"];
            rows.Add(titleGF.ToArray());

            // Add GF1 row
            List<string> GF1Row = PrepareRow("                Level 1", items, "GF1");
            rows.Add(GF1Row.ToArray());

            // Add GF2 row
            List<string> GF2Row = PrepareRow("                Level 2", items, "GF2");
            rows.Add(GF2Row.ToArray());

            // Add GF3 row
            List<string> GF3Row = PrepareRow("                Level 3", items, "GF3");
            rows.Add(GF3Row.ToArray());

            // Add Meyani row
            List<string> MeyaniRow = PrepareRow("3. Meyani ", items, "Meya");
            rows.Add(MeyaniRow.ToArray());

            // Add Meyani No change row
            List<string> Meya_NoChgRow = PrepareRow("                Not change color.", items, "Meya_NoChg");
            rows.Add(Meya_NoChgRow.ToArray());

            // Add Foreign materials title row
            List<string> FMRow = PrepareRow("4.Foreign materials", items, "ForeignMat");
            rows.Add(FMRow.ToArray());

            // Add  Title row
            string[] titleBlackSpot = ["5. Black Spot"];
            rows.Add(titleBlackSpot.ToArray());

            // Add Black Spot SS row
            List<string> bsSSRow = PrepareRow("                (1) SS 0.08mm²", items, "BlackSpot_SS");
            rows.Add(bsSSRow.ToArray());

            // Add Black Spot S row
            List<string> bsSRow = PrepareRow("                (2) S 0.08-0.20mm²", items, "BlackSpot_S");
            rows.Add(bsSRow.ToArray());

            // Add Black Spot M row
            List<string> bsMRow = PrepareRow("                (3) M 0.20-0.50mm²", items, "BlackSpot_M");
            rows.Add(bsMRow.ToArray());

            // Add Black Spot L row
            List<string> bsLRow = PrepareRow("                (4) L 0.50mm²<", items, "BlackSpot_L");
            rows.Add(bsLRow.ToArray());

            // Add Abnormal Color row
            List<string> abnormalColorRow = PrepareRow("6. Color abnormal", items, "ColorAbnomal");
            rows.Add(abnormalColorRow.ToArray());

            // Add  Macaroni Title row
            string[] titleMaco = ["7. Macaroni "];
            rows.Add(titleBlackSpot.ToArray());

            // Add Macaroni SS row
            List<string> macoSSRow = PrepareRow("                (1) SS 0.08mm²", items, "Macaroni_SS");
            rows.Add(macoSSRow.ToArray());

            // Add Macaroni S row
            List<string> macoSRow = PrepareRow("                (2) S 0.08-0.20mm²", items, "Macaroni_S");
            rows.Add(macoSRow.ToArray());

            // Add Macaroni M row
            List<string> macoMRow = PrepareRow("                (3) M 0.20-0.50mm²", items, "Macaroni_M");
            rows.Add(macoMRow.ToArray());

            // Add Macaroni L row
            List<string> macoLRow = PrepareRow("                (4) L 0.50mm²<", items, "Macaroni_L");
            rows.Add(macoLRow.ToArray());

            // Add Judgement row
            List<string> judgeRow = PrepareRow("Judgment (OK/NG)", items, "Judgement");
            rows.Add(judgeRow.ToArray());

            // Add Remark row
            List<string> remarkRow = PrepareRow("Remark", items, "Remark");
            rows.Add(remarkRow.ToArray());

            // Add PIC row
            List<string> PICRow = PrepareRow("Check By", items, "PIC");
            rows.Add(PICRow.ToArray());

            // Add Macaroni L row
            List<string> dateRow = PrepareRow("Date", items, "Date");
            rows.Add(dateRow.ToArray());

            return rows;
        }

        #endregion

        private List<string> PrepareRow(string firstData, DataTable items, string columnName)
        {
            List<string> row = new List<string>();
            row.Add(firstData);
            if (columnName != null) 
            {
                for (int i = 0; i < items.Rows.Count; i++)
                {
                    string data = items.Rows[i][columnName].ToString();
                    if (columnName == "Date") { data = items.Rows[i][columnName].ToString().Substring(0, 9); }
                    row.Add(data);
                }
            }
            return row;
        }

        private void LoadData()
        {

            // Set header
            //List<string> batchNumbers = PrepareHeader();
            List<string> batchNumbers = ProvideTestHeader();

            // Add batch columns as headers
            foreach (string batch in batchNumbers)
            {
                dt.Columns.Add(batch);
            }

            // Get Data Rows
            //List<string[]> rows = PrepareData();
            List<string[]> rows = ProvideTestRows();

            // Add rows to DataTable
            foreach (var row in rows)
            {
                dt.Rows.Add(row);
            }

            // Bind to DataGrid
            dataGrid.ItemsSource = dt.DefaultView;
            ConfigureDataGrid();
        }

        // Configure DataGrid detail
        private void ConfigureDataGrid()
        {
            // Set column width
            double standardColumnWidth = 100; // Width for all columns except column 0

            // Set Style Header
            var modernHeaderStyle = new Style(typeof(DataGridColumnHeader));
            modernHeaderStyle.Setters.Add(new Setter(BackgroundProperty, new SolidColorBrush(Color.FromRgb(250, 250, 250)))); // Light Gray
            modernHeaderStyle.Setters.Add(new Setter(HorizontalContentAlignmentProperty, HorizontalAlignment.Center));
            modernHeaderStyle.Setters.Add(new Setter(VerticalContentAlignmentProperty, VerticalAlignment.Center));

            // All other columns - Center aligned
            for (int i = 1; i < dataGrid.Columns.Count; i++)
            {
                // Set uniform column width
                dataGrid.Columns[i].Width = standardColumnWidth;

                dataGrid.Columns[i].CellStyle = new Style(typeof(DataGridCell)) 
                {
                    Setters = { 
                                new Setter(TextBlock.TextAlignmentProperty, TextAlignment.Center),
                                new Setter(VerticalAlignmentProperty, VerticalAlignment.Center),  // Center vertical alignment
                                new Setter(TextBlock.VerticalAlignmentProperty, VerticalAlignment.Center)  // Ensure text is centered
                    }
                };

                // Center align headers
                dataGrid.Columns[i].HeaderStyle = modernHeaderStyle;
            }
        }
        // define the event handler method:
        private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            ConfigureDataGrid(); // Ensure alignment after columns are generated
        }


        #region Export report function
        // Export to CSV
        private void ExportToCSV_Click(object sender, RoutedEventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog
            {
                Filter = "CSV file (*.csv)|*.csv",
                FileName = "table_data.csv"
            };

            if (saveFileDialog.ShowDialog() == true)
            {
                using (StreamWriter writer = new StreamWriter(saveFileDialog.FileName))
                {
                    foreach (DataColumn column in dt.Columns)
                    {
                        writer.Write(column.ColumnName + ",");
                    }
                    writer.WriteLine();

                    foreach (DataRow row in dt.Rows)
                    {
                        foreach (var item in row.ItemArray)
                        {
                            writer.Write(item.ToString() + ",");
                        }
                        writer.WriteLine();
                    }
                }
                MessageBox.Show("CSV Exported Successfully!");
            }
        }

        // Export to Excel
        private void ExportToExcel_Click(object sender, RoutedEventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog
            {
                Filter = "Excel file (*.xlsx)|*.xlsx",
                FileName = "table_data.xlsx"
            };

            if (saveFileDialog.ShowDialog() == true)
            {
                ExcelPackage.LicenseContext = OfficeOpenXml.LicenseContext.NonCommercial;

                using (ExcelPackage package = new ExcelPackage())
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Table Data");

                    for (int col = 0; col < dt.Columns.Count; col++)
                    {
                        worksheet.Cells[1, col + 1].Value = dt.Columns[col].ColumnName;
                    }

                    for (int row = 0; row < dt.Rows.Count; row++)
                    {
                        for (int col = 0; col < dt.Columns.Count; col++)
                        {
                            worksheet.Cells[row + 2, col + 1].Value = dt.Rows[row][col];
                        }
                    }

                    package.SaveAs(new FileInfo(saveFileDialog.FileName));
                }
                MessageBox.Show("Excel Exported Successfully!");
            }
        }

        // Export to PDF
        private void BtnExport_Click(object sender, RoutedEventArgs e)
        {
            ExportDataGridToPDF(dataGrid); // Call it as an instance method
        }

        public void ExportDataGridToPDF(DataGrid dataGrid)
        {
            try
            {
                SaveFileDialog saveFileDialog = new SaveFileDialog
                {
                    Filter = "PDF Files (*.pdf)|*.pdf",
                    Title = "Save PDF File",
                    DefaultExt = "pdf"
                };

                if (saveFileDialog.ShowDialog() == true)
                {
                    string filePath = saveFileDialog.FileName;

                    // Create a PDF document with Landscape orientation
                    Document pdfDoc = new Document(PageSize.A4.Rotate(), 10, 10, 10, 10); // For portial just remove .Rotate() method
                    PdfWriter.GetInstance(pdfDoc, new FileStream(filePath, FileMode.Create));
                    pdfDoc.Open();

                    // Add a title to the PDF
                    //pdfDoc.Add(new Paragraph("Exported Data from DataGrid"));
                    //pdfDoc.Add(new Paragraph(" ")); // Add some space

                    // Create a PDF table with the same number of columns as the DataGrid
                    PdfPTable pdfTable = new PdfPTable(dataGrid.Columns.Count);
                    pdfTable.WidthPercentage = 100;

                    // Create a BaseFont
                    BaseFont baseFont = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                    iTextSharp.text.Font font = new iTextSharp.text.Font(baseFont, 12); // Define font size

                    // Define column widths evenly
                    float[] columnWidths = new float[dataGrid.Columns.Count];
                    for (int i = 0; i < columnWidths.Length; i++)
                    {
                        columnWidths[i] = 100f / dataGrid.Columns.Count; // Distribute evenly
                    }

                    pdfTable.SetWidths(columnWidths);

                    // Add the headers from the DataGrid to the PDF table
                    foreach (var column in dataGrid.Columns)
                    {
                        PdfPCell cell = new PdfPCell(new Phrase(column.Header.ToString(), font))
                        {
                            BackgroundColor = BaseColor.LIGHT_GRAY
                        };
                        cell.HorizontalAlignment = Element.ALIGN_CENTER;
                        pdfTable.AddCell(cell);
                    }

                    // Add the rows from the DataGrid to the PDF table
                    foreach (var item in dataGrid.Items)
                    {
                        if (item is DataRowView rowView)
                        {
                            for (int colIndex = 0; colIndex < dataGrid.Columns.Count; colIndex++)
                            {
                                string cellValue = GetCellValue(rowView, dataGrid.Columns[colIndex]);

                                PdfPCell cell = new PdfPCell(new Phrase(cellValue, font));

                                // If it's NOT the first column (column 0), center-align text
                                if (colIndex > 0)
                                {
                                    cell.HorizontalAlignment = Element.ALIGN_CENTER;
                                }

                                pdfTable.AddCell(cell);
                            }
                        }
                    }

                    // Add the table to the PDF document
                    pdfDoc.Add(pdfTable);
                    pdfDoc.Close();

                    MessageBox.Show($"PDF exported successfully to {filePath}", "Export Success", MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error exporting to PDF: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        // Helper function to extract cell value
        private string GetCellValue(DataRowView rowView, DataGridColumn column)
        {
            if (column is DataGridBoundColumn boundColumn && boundColumn.Binding is System.Windows.Data.Binding binding)
            {
                string columnName = binding.Path.Path;
                return rowView.Row[columnName]?.ToString() ?? string.Empty;
            }
            return string.Empty;
        }
        #endregion

        #region Test Data
        // Provide Test Data
        private List<string[]> ProvideTestRows()
        {
            // Sample Data Rows (similar to the image)
            List<string[]> rows = new List<string[]>
            {
                new string[] { "Lot No.", "501111", "", "", "" },
                new string[] { "1. Pallet size", "", "", "", "" },
                new string[] { "  1.1 Pellet size", "Pass", "Pass", "Pass", "Pass" },
                new string[] { "  1.2 Misscut of pellets", "", "", "", "" },
                new string[] { "                (1) Double length", "0", "0", "0", "0" },
                new string[] { "                (2) Triple length", "0", "0", "0", "0" },
                new string[] { "                (3) Fourfold length", "0", "0", "0", "0" },
                new string[] { "  1.3 Linkage of pellets ", "", "", "", "" },
                new string[] { "                (1) Double linkage", "3", "2", "0", "0" },
                new string[] { "                (2) Triple linkage", "1", "2", "0", "0" },
                new string[] { "                (3) Fourfold linkage", "0", "0", "0", "0" },
                new string[] { "                (4) Fivefold linkage", "0", "0", "0", "0" },
                new string[] { "  1.4 Defect of cutting plane", "0", "0", "0", "0" },
                new string[] { "2. GF not Distribution", "", "", "", "" },
                new string[] { "                Level 1", "1", "0", "0", "0" },
                new string[] { "                Level 2", "0", "0", "0", "0" },
                new string[] { "                Level 3", "0", "0", "0", "0" },
                new string[] { "3. Meyani ", "0", "0", "0", "0" },
                new string[] { "                Not change color.", "0", "0", "0", "0" },
                new string[] { "4. Foreign materials", "0", "0", "0", "0" },
                new string[] { "5. Black Spot", "", "", "", "" },
                new string[] { "                (1) SS 0.08mm²", "2", "2", "0", "0" },
                new string[] { "                (2) S 0.08-0.20mm²", "1", "2", "0", "0" },
                new string[] { "                (3) M 0.20-0.50mm²", "0", "0", "0", "0" },
                new string[] { "                (4) L 0.50mm²<", "0", "0", "0", "0" },
                new string[] { "6. Color abnormal", "0", "0", "0", "0" },
                new string[] { "7. Macaroni ", "", "", "", "" },
                new string[] { "                (1) SS 1.00mm²", "0", "0", "0", "0" },
                new string[] { "                (2) S 1.00-1.50mm²", "0", "0", "0", "0" },
                new string[] { "                (3) M 1.50-2.00mm²", "0", "0", "0", "0" },
                new string[] { "                (4) L 2.00mm²<", "0", "0", "0", "0" },
                new string[] { "Judgment (OK/NG)", "OK", "OK", "OK", "OK" },
                new string[] { "Check By", "Miss. Nuanyai", "Miss. Nuanyai", "Miss. Nuanyai", "Miss. Nuanyai" },
                new string[] { "Date", "1/7/2025", "1/7/2025", "1/7/2025", "1/7/2025" },
            };
            return rows;
        }

        private List<string> ProvideTestHeader()
        {
            List<string> headers = ["Batch Number"];
            // Sample Batch Numbers (These will be the headers)
            List<string> batchNumbers = [ "21", "22", "24", "26" ];
            
            headers.AddRange(batchNumbers);

            return headers;
        }
        #endregion
    }
}
