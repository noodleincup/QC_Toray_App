using iTextSharp.text.pdf;
using iTextSharp.text;
using Microsoft.Win32;
using OfficeOpenXml;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace QC_Toray_App_v3
{
    /// <summary>
    /// Interaction logic for Report2_UserControl.xaml
    /// </summary>
    public partial class Report2_UserControl : UserControl
    {
        // Create DataTable
        DataTable dt = new DataTable();
        public Report2_UserControl()
        {
            InitializeComponent();
            dataGrid.AutoGeneratedColumns += DataGrid_AutoGeneratedColumns; // Attach event
            LoadData();
        }

        private void LoadData()
        {
            // Sample Batch Numbers (These will be the headers)
            string[] Headers = { "Line", "Type", "Grade", "Bt", "Lot", "Check", "Result", "PIC", "Remark", "Time"};

            // Add batch columns as headers
            foreach (string header in Headers)
            {
                dt.Columns.Add(header);
            }

            //Generate Data
            List<string[]> rows = GenerateData();

            // Add rows to DataTable
            foreach (var row in rows)
            {
                dt.Rows.Add(row);
            }

            // Bind to DataGrid
            dataGrid.ItemsSource = dt.DefaultView;
            ConfigureDataGrid();
        }

        // Generate Example Data
        private List<string[]> GenerateData()
        {
            // Sample Data Rows (similar to the image)
            List<string[]> rows = new List<string[]>
            {
                new string[] { "C", "PBT", "1401X34 HB", "176", "50164909", "1", "OK", "Miss.Thanika", "","9:34" },
                new string[] { "C", "PBT", "1401X34 HB", "177", "50164910", "1", "OK", "Miss.Thanika", "","9:35" },
                new string[] { "C", "PBT", "1401X34 HB", "178", "50164910", "1", "OK", "Miss.Thanika", "","9:37" },
                new string[] { "C", "PBT", "1401X34 HB", "180", "50164910", "1", "OK", "Miss.Thanika", "","9:38" },
                new string[] { "C", "PBT", "1401X34 HB", "182", "50164910", "1", "OK", "Miss.Thanika", "","9:39" },
                new string[] { "C", "PBT", "1401X34 HB", "184", "50164910", "1", "OK", "Miss.Thanika", "","9:41" },
                new string[] { "C", "PBT", "1401X34 HB", "186", "50164910", "1", "OK", "Miss.Thanika", "","9:43" },
                new string[] { "C", "PBT", "1401X34 HB", "188", "50164910", "1", "OK", "Miss.Thanika", "","9:45" },
                new string[] { "C", "PBT", "1401X34 HB", "190", "50164910", "1", "OK", "Miss.Thanika", "","9:47" },
                new string[] { "C", "PBT", "1401X34 HB", "192", "50164910", "1", "OK", "Miss.Thanika", "","9:48" },
                new string[] { "C", "PBT", "1401X34 HB", "194", "50164910", "1", "OK", "Miss.Thanika", "","9:49" },
                new string[] { "C", "PBT", "1401X34 HB", "196", "50164911", "1", "OK", "Miss.Thanika", "","9:50" },
                new string[] { "B", "PBT", "1401X51 B", "30", "50167672", "1", "OK", "Miss.Thanika", "","10:00" },
                new string[] { "B", "PBT", "1401X51 B", "32", "50167672", "1", "OK", "Miss.Thanika", "","10:02" },
                new string[] { "B", "PBT", "1401X51 B", "34", "50167672", "1", "OK", "Miss.Thanika", "","10:04" },
                new string[] { "B", "PBT", "1401X51 B", "36", "50167672", "1", "OK", "Miss.Thanika", "","10:07" },
                new string[] { "B", "PBT", "1401X51 B", "38", "50167672", "1", "OK", "Miss.Thanika", "","10:09" },
                new string[] { "B", "PBT", "1401X51 B", "40", "50167672", "1", "OK", "Miss.Thanika", "","10:10" },
                new string[] { "B", "PBT", "1401X51 B", "42", "50167673", "1", "OK", "Miss.Thanika", "","10:12" },
                new string[] { "B", "PBT", "1401X51 B", "44", "50167673", "1", "OK", "Miss.Thanika", "Hell","10:13" },
                new string[] { "B", "PBT", "1401X51 B", "46", "50167673", "1", "OK", "Miss.Thanika", "","10:15" },
                new string[] { "B", "PBT", "1401X51 B", "48", "50167673", "1", "OK", "Miss.Thanika", "","10:19" },
                new string[] { "B", "PBT", "1401X51 B", "50", "50167673", "1", "OK", "Miss.Thanika", "","10:28" },
                new string[] { "B", "PBT", "1401X51 B", "52", "50167673", "1", "OK", "Miss.Thanika", "เม็ดเฉียง","10:29" },
                new string[] { "D", "PBT", "1401X34 H", "273", "50164115", "1", "OK", "Miss.Thanika","", "10:43" },
                new string[] { "TC", "NYLON", "DY66R", "5", "50166R08", "1", "NG", "Miss.Thanika", "","10:53" }
            };
            return rows;
        }

        private void ConfigureDataGrid()
        {
            // Set column width
            double standardColumnWidth = 100; // Width for all columns except column 0

            // Set Style Header
            var modernHeaderStyle = new Style(typeof(DataGridColumnHeader));
            modernHeaderStyle.Setters.Add(new Setter(BackgroundProperty, new SolidColorBrush(Color.FromRgb(250, 250, 250)))); // Light Gray
            modernHeaderStyle.Setters.Add(new Setter(HorizontalContentAlignmentProperty, HorizontalAlignment.Center));
            modernHeaderStyle.Setters.Add(new Setter(VerticalContentAlignmentProperty, VerticalAlignment.Center));

            // All other columns - Center aligned
            for (int i = 1; i < dataGrid.Columns.Count; i++)
            {
                // Set uniform column width
                dataGrid.Columns[i].Width = standardColumnWidth;

                dataGrid.Columns[i].CellStyle = new Style(typeof(DataGridCell))
                {
                    Setters = {
                                new Setter(TextBlock.TextAlignmentProperty, TextAlignment.Center),
                                new Setter(VerticalAlignmentProperty, VerticalAlignment.Center),  // Center vertical alignment
                                new Setter(TextBlock.VerticalAlignmentProperty, VerticalAlignment.Center)  // Ensure text is centered
                    }
                };

                // Center align headers
                dataGrid.Columns[i].HeaderStyle = modernHeaderStyle;
            }
        }
        // define the event handler method:
        private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            ConfigureDataGrid(); // Ensure alignment after columns are generated
        }


        #region Export functions
        // Export to CSV
        private void ExportToCSV_Click(object sender, RoutedEventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog
            {
                Filter = "CSV file (*.csv)|*.csv",
                FileName = "table_data.csv"
            };

            if (saveFileDialog.ShowDialog() == true)
            {
                using (StreamWriter writer = new StreamWriter(saveFileDialog.FileName))
                {
                    foreach (DataColumn column in dt.Columns)
                    {
                        writer.Write(column.ColumnName + ",");
                    }
                    writer.WriteLine();

                    foreach (DataRow row in dt.Rows)
                    {
                        foreach (var item in row.ItemArray)
                        {
                            writer.Write(item.ToString() + ",");
                        }
                        writer.WriteLine();
                    }
                }
                MessageBox.Show("CSV Exported Successfully!");
            }
        }

        // Export to Excel
        private void ExportToExcel_Click(object sender, RoutedEventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog
            {
                Filter = "Excel file (*.xlsx)|*.xlsx",
                FileName = "table_data.xlsx"
            };

            if (saveFileDialog.ShowDialog() == true)
            {
                ExcelPackage.LicenseContext = OfficeOpenXml.LicenseContext.NonCommercial;

                using (ExcelPackage package = new ExcelPackage())
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Table Data");

                    for (int col = 0; col < dt.Columns.Count; col++)
                    {
                        worksheet.Cells[1, col + 1].Value = dt.Columns[col].ColumnName;
                    }

                    for (int row = 0; row < dt.Rows.Count; row++)
                    {
                        for (int col = 0; col < dt.Columns.Count; col++)
                        {
                            worksheet.Cells[row + 2, col + 1].Value = dt.Rows[row][col];
                        }
                    }

                    package.SaveAs(new FileInfo(saveFileDialog.FileName));
                }
                MessageBox.Show("Excel Exported Successfully!");
            }
        }

        // Export to PDF
        private void BtnExport_Click(object sender, RoutedEventArgs e)
        {
            ExportDataGridToPDF(dataGrid); // Call it as an instance method
        }

        public void ExportDataGridToPDF(DataGrid dataGrid)
        {
            try
            {
                SaveFileDialog saveFileDialog = new SaveFileDialog
                {
                    Filter = "PDF Files (*.pdf)|*.pdf",
                    Title = "Save PDF File",
                    DefaultExt = "pdf"
                };

                if (saveFileDialog.ShowDialog() == true)
                {
                    string filePath = saveFileDialog.FileName;

                    // Create a PDF document with Landscape orientation
                    Document pdfDoc = new Document(PageSize.A4, 10, 10, 10, 10); // For portial just remove .Rotate() method
                    PdfWriter.GetInstance(pdfDoc, new FileStream(filePath, FileMode.Create));
                    pdfDoc.Open();

                    // Create a PDF table with the same number of columns as the DataGrid
                    PdfPTable pdfTable = new PdfPTable(dataGrid.Columns.Count);
                    pdfTable.WidthPercentage = 100;

                    // Create a BaseFont
                    //string fontPath = "D:\\Project\\QC_Toray\\QC_Toray_App_v3\\QC_Toray_App_v3\\Fonts\\segoeui.ttf"; // Change this path as needed
                    //BaseFont baseFont = BaseFont.CreateFont(fontPath, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
                    BaseFont baseFont = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                    iTextSharp.text.Font font = new iTextSharp.text.Font(baseFont, 12); // Define font size

                    // Define column widths evenly
                    // Calculate column widths dynamically based on maximum text width in each column
                    float[] columnWidths = new float[dataGrid.Columns.Count];
                    float paddingFactor = 1.2f; // Add some extra space for padding

                    for (int colIndex = 0; colIndex < dataGrid.Columns.Count; colIndex++)
                    {
                        float maxColumnWidth = 0;

                        // Measure header width
                        string headerText = dataGrid.Columns[colIndex].Header.ToString();
                        maxColumnWidth = Math.Max(maxColumnWidth, baseFont.GetWidthPoint(headerText, font.Size));

                        // Measure data width for each row in the column
                        foreach (var item in dataGrid.Items)
                        {
                            if (item is DataRowView rowView)
                            {
                                string cellText = GetCellValue(rowView, dataGrid.Columns[colIndex]);
                                float textWidth = baseFont.GetWidthPoint(cellText, font.Size);
                                maxColumnWidth = Math.Max(maxColumnWidth, textWidth);
                            }
                        }

                        // Apply padding factor
                        columnWidths[colIndex] = maxColumnWidth * paddingFactor;
                    }

                    // Scale column widths to fit within page width
                    float totalTableWidth = columnWidths.Sum();
                    float maxPageWidth = PageSize.A4.Width - 40; // Account for margins (20 left + 20 right)

                    // If total width exceeds page width, scale down
                    if (totalTableWidth > maxPageWidth)
                    {
                        float scaleFactor = maxPageWidth / totalTableWidth;
                        for (int i = 0; i < columnWidths.Length; i++)
                        {
                            columnWidths[i] *= scaleFactor;
                        }
                    }

                    // Apply dynamic column widths
                    pdfTable.SetWidths(columnWidths);

                    // Add the headers from the DataGrid to the PDF table
                    foreach (var column in dataGrid.Columns)
                    {
                        PdfPCell cell = new PdfPCell(new Phrase(column.Header.ToString(), font))
                        {
                            BackgroundColor = BaseColor.LIGHT_GRAY
                        };
                        cell.HorizontalAlignment = Element.ALIGN_CENTER;
                        pdfTable.AddCell(cell);
                    }

                    // Add the rows from the DataGrid to the PDF table
                    foreach (var item in dataGrid.Items)
                    {
                        // Row Mangement
                        if (item is DataRowView rowView)
                        {
                            // Column Mangement
                            for (int colIndex = 0; colIndex < dataGrid.Columns.Count; colIndex++)
                            {
                                string cellValue = GetCellValue(rowView, dataGrid.Columns[colIndex]);
                                // Define Font to cell in this column
                                PdfPCell cell = new PdfPCell(new Phrase(cellValue, font));
                                // Text Alignment in cell
                                cell.HorizontalAlignment = Element.ALIGN_CENTER;
                                pdfTable.AddCell(cell);
                            }
                        }
                    }

                    // Add the table to the PDF document
                    pdfDoc.Add(pdfTable);
                    pdfDoc.Close();

                    MessageBox.Show($"PDF exported successfully to {filePath}", "Export Success", MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error exporting to PDF: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        #endregion


        // Helper function to extract cell value
        private string GetCellValue(DataRowView rowView, DataGridColumn column)
        {
            if (column is DataGridBoundColumn boundColumn && boundColumn.Binding is System.Windows.Data.Binding binding)
            {
                string columnName = binding.Path.Path;
                return rowView.Row[columnName]?.ToString() ?? string.Empty;
            }
            return string.Empty;
        }

    }
}
